// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: dronozor.proto

package dronozor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DronozorClient is the client API for Dronozor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DronozorClient interface {
	SendPhoto(ctx context.Context, in *PhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dronozorClient struct {
	cc grpc.ClientConnInterface
}

func NewDronozorClient(cc grpc.ClientConnInterface) DronozorClient {
	return &dronozorClient{cc}
}

func (c *dronozorClient) SendPhoto(ctx context.Context, in *PhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dronozor.Dronozor/SendPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dronozorClient) SendVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dronozor.Dronozor/SendVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DronozorServer is the server API for Dronozor service.
// All implementations must embed UnimplementedDronozorServer
// for forward compatibility
type DronozorServer interface {
	SendPhoto(context.Context, *PhotoRequest) (*emptypb.Empty, error)
	SendVideo(context.Context, *VideoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDronozorServer()
}

// UnimplementedDronozorServer must be embedded to have forward compatible implementations.
type UnimplementedDronozorServer struct {
}

func (UnimplementedDronozorServer) SendPhoto(context.Context, *PhotoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoto not implemented")
}
func (UnimplementedDronozorServer) SendVideo(context.Context, *VideoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVideo not implemented")
}
func (UnimplementedDronozorServer) mustEmbedUnimplementedDronozorServer() {}

// UnsafeDronozorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DronozorServer will
// result in compilation errors.
type UnsafeDronozorServer interface {
	mustEmbedUnimplementedDronozorServer()
}

func RegisterDronozorServer(s grpc.ServiceRegistrar, srv DronozorServer) {
	s.RegisterService(&Dronozor_ServiceDesc, srv)
}

func _Dronozor_SendPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DronozorServer).SendPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dronozor.Dronozor/SendPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DronozorServer).SendPhoto(ctx, req.(*PhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dronozor_SendVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DronozorServer).SendVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dronozor.Dronozor/SendVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DronozorServer).SendVideo(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dronozor_ServiceDesc is the grpc.ServiceDesc for Dronozor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dronozor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dronozor.Dronozor",
	HandlerType: (*DronozorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPhoto",
			Handler:    _Dronozor_SendPhoto_Handler,
		},
		{
			MethodName: "SendVideo",
			Handler:    _Dronozor_SendVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dronozor.proto",
}
